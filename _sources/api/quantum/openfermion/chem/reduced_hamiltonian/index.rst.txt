:py:mod:`quantum.openfermion.chem.reduced_hamiltonian`
======================================================

.. py:module:: quantum.openfermion.chem.reduced_hamiltonian


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.openfermion.chem.reduced_hamiltonian.make_reduced_hamiltonian



.. py:function:: make_reduced_hamiltonian(molecular_hamiltonian: orquestra.quantum.openfermion.ops.representations.InteractionOperator, n_electrons: int) -> orquestra.quantum.openfermion.ops.representations.InteractionOperator

   Construct the reduced Hamiltonian.

   This Hamiltonian is equivalent to the electronic structure Hamiltonian
   but contains only two-body terms.  To do this, the operator now depends
   on the number of particles being simulated.  We use the RDM sum rule to
   lift the 1-body terms to the two-body space.

   Derivation:
       use the fact that i^l = (1/(n -1)) sum_{jk}\delta_{jk}i^ j^ k l
                         i^l = (-1/(n -1)) sum_{jk}\delta_{jk}j^ i^ k l
                         i^l = (-1/(n -1)) sum_{jk}\delta_{jk}i^ j^ l k
                         i^l = (1/(n -1)) sum_{jk}\delta_{jk}j^ i^ l k

       Rewrite each one-body term as an even weighting of all four 2-RDM
       elements with delta functions. Then rearrange terms so that each ijkl
       term gets a sum of permuted one-body terms multiplied by delta
       function. One should notice that this results in the same formula
       if one was to apply the wedge product!

   :param molecular_hamiltonian: operator to write reduced hamiltonian for
   :param n_electrons: number of electrons in the system

   :returns: InteractionOperator with a zero one-body component.


