:py:mod:`quantum.openfermion.transforms.repconversions`
=======================================================

.. py:module:: quantum.openfermion.transforms.repconversions


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   conversions/index.rst
   operator_tapering/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.openfermion.transforms.repconversions.get_interaction_operator
   quantum.openfermion.transforms.repconversions.get_molecular_data
   quantum.openfermion.transforms.repconversions.freeze_orbitals
   quantum.openfermion.transforms.repconversions.prune_unused_indices



.. py:function:: get_interaction_operator(fermion_operator, n_qubits=None)

   Convert a 2-body fermionic operator to InteractionOperator.

   This function should only be called on fermionic operators which
   consist of only a_p^\dagger a_q and a_p^\dagger a_q^\dagger a_r a_s
   terms. The one-body terms are stored in a matrix, one_body[p, q], and
   the two-body terms are stored in a tensor, two_body[p, q, r, s].

   :returns: An instance of the InteractionOperator class.
   :rtype: interaction_operator

   :raises TypeError: Input must be a FermionOperator.
   :raises TypeError: FermionOperator does not map to InteractionOperator.

   .. warning::

      Even assuming that each creation or annihilation operator appears
      at most a constant number of times in the original operator, the
      runtime of this method is exponential in the number of qubits.


.. py:function:: get_molecular_data(interaction_operator, geometry=None, basis=None, multiplicity=None, n_electrons=None, reduce_spin=True, data_directory=None)

   Output a MolecularData object generated from an InteractionOperator

   :param interaction_operator: two-body interaction
                                operator defining the "molecular interaction" to be simulated.
   :type interaction_operator: InteractionOperator
   :param geometry:
   :type geometry: string or list of atoms
   :param basis: String denoting the basis set used to discretize the
                 system.
   :type basis: string
   :param multiplicity: Spin multiplicity desired in the system.
   :type multiplicity: int
   :param n_electrons: Number of electrons in the system
   :type n_electrons: int
   :param reduce_spin: True if one wishes to perform spin reduction on
                       integrals that are given in interaction operator.  Assumes
                       spatial (x) spin structure generically.
   :type reduce_spin: bool

   :returns:     Instance that captures the
                 interaction_operator converted into the format that would come
                 from an electronic structure package adorned with some meta-data
                 that may be useful.
   :rtype: molecule(MolecularData)


.. py:function:: freeze_orbitals(fermion_operator, occupied, unoccupied=None, prune=True)

   Fix some orbitals to be occupied and others unoccupied.

   Removes all operators acting on the specified orbitals, and renumbers the
   remaining orbitals to eliminate unused indices. The sign of each term
   is modified according to the ladder uperator anti-commutation relations in
   order to preserve the expectation value of the operator.

   :param occupied: A list containing the indices of the orbitals that are to be
                    assumed to be occupied.
   :param unoccupied: A list containing the indices of the orbitals that are to
                      be assumed to be unoccupied.


.. py:function:: prune_unused_indices(symbolic_operator)

   Remove indices that do not appear in any terms.

   Indices will be renumbered such that if an index i does not appear in
   any terms, then the next largest index that appears in at least one
   term will be renumbered to i.


