:py:mod:`quantum.openfermion.transforms.opconversions.term_reordering`
======================================================================

.. py:module:: quantum.openfermion.transforms.opconversions.term_reordering

.. autoapi-nested-parse::

   Functions to reorder terms within SymbolicOperators



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.openfermion.transforms.opconversions.term_reordering.chemist_ordered
   quantum.openfermion.transforms.opconversions.term_reordering.normal_ordered
   quantum.openfermion.transforms.opconversions.term_reordering.normal_ordered_ladder_term
   quantum.openfermion.transforms.opconversions.term_reordering.reorder



.. py:function:: chemist_ordered(fermion_operator)

   Puts a two-body fermion operator in chemist ordering.

   The normal ordering convention for chemists is different.
   Rather than ordering the two-body term as physicists do, as
   $a^\dagger a^\dagger a a$
   the chemist ordering of the two-body term is
   $a^\dagger a a^\dagger a$

   TODO: This routine can be made more efficient.

   :param fermion_operator: a fermion operator guarenteed to
                            have number conserving one- and two-body fermion terms only.
   :type fermion_operator: FermionOperator

   :returns:

             the input operator
                 ordered in the chemistry convention.
   :rtype: chemist_ordered_operator (FermionOperator)

   :raises OperatorSpecificationError: Operator is not two-body number conserving.


.. py:function:: normal_ordered(operator, hbar=1.0)

   Compute and return the normal ordered form of a FermionOperator,
   or InteractionOperator.

   Due to the canonical commutation/anticommutation relations satisfied
   by these operators, there are multiple forms that the same operator
   can take. Here, we define the normal ordered form of each operator,
   providing a distinct representation for distinct operators.

   In our convention, normal ordering implies terms are ordered
   from highest tensor factor (on left) to lowest (on right). In
   addition:

   * FermionOperators: a^\dagger comes before a

   :param operator: an instance of the FermionOperator, or InteractionOperator classes.
   :param hbar: the value of hbar used in the definition of the
                commutator [q_i, p_j] = i hbar delta_ij. By default hbar=1.
   :type hbar: float


.. py:function:: normal_ordered_ladder_term(term, coefficient, parity=-1)

   Return a normal ordered FermionOperator corresponding
   to single term.

   :param term: A sequence of tuples. The first element of each
                tuple is an integer indicating the mode on which a fermion ladder
                operator acts, starting from zero. The second element of each
                tuple is an integer, either 1 or 0, indicating whether creation
                or annihilation acts on that mode.
   :type term: list or tuple
   :param coefficient: The coefficient of the term.
   :type coefficient: complex or float
   :param parity: parity=-1 corresponds to a Fermionic term that should be
                  ordered based on the canonical anti-commutation relations.
                  parity=1 corresponds to a Bosonic term that should be ordered based
                  on the canonical commutation relations.
   :type parity: int

   :returns:

             a FermionOperator instance.
                 The normal ordered form of the input.
                 Note that this might have more terms.
   :rtype: ordered_term

   In our convention, normal ordering implies terms are ordered
   from highest tensor factor (on left) to lowest (on right).
   Also, ladder operators come first.

   .. warning::

      Even assuming that each creation or annihilation operator appears
      at most a constant number of times in the original term, the
      runtime of this method is exponential in the number of qubits.


.. py:function:: reorder(operator, order_function, num_modes=None, reverse=False)

   Changes the ladder operator order of the Hamiltonian based on the
   provided order_function per mode index.

   :param operator: the operator that will be reordered. must
                    be a SymbolicOperator or any type of operator that inherits from
                    SymbolicOperator.
   :type operator: SymbolicOperator
   :param order_function: a function per mode that is used to map the
                          indexing. must have arguments mode index and num_modes.
   :type order_function: func
   :param num_modes: default None. User can provide the number of modes
                     assumed for the system. if None, the number of modes will be
                     calculated based on the Operator.
   :type num_modes: int
   :param reverse: default False. if set to True, the mode mapping is
                   reversed. reverse = True will not revert back to original if
                   num_modes calculated differs from original and reverted.
   :type reverse: bool

   Note: Every order function must take in a mode_idx and num_modes.


