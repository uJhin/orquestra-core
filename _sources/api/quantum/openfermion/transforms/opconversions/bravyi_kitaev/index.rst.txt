:py:mod:`quantum.openfermion.transforms.opconversions.bravyi_kitaev`
====================================================================

.. py:module:: quantum.openfermion.transforms.opconversions.bravyi_kitaev

.. autoapi-nested-parse::

   Bravyi-Kitaev transform on fermionic operators.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.openfermion.transforms.opconversions.bravyi_kitaev.bravyi_kitaev
   quantum.openfermion.transforms.opconversions.bravyi_kitaev.inline_sum
   quantum.openfermion.transforms.opconversions.bravyi_kitaev.inline_product



.. py:function:: bravyi_kitaev(operator, n_qubits=None)

   Apply the Bravyi-Kitaev transform.

   Implementation from arXiv:quant-ph/0003137 and
   "A New Data Structure for Cumulative Frequency Tables" by Peter M. Fenwick.

   Note that this implementation is equivalent to the one described in
   arXiv:1208.5986, and is different from the one described in
   arXiv:1701.07072. The one described in arXiv:1701.07072 is implemented
   in OpenFermion as `bravyi_kitaev_tree`.

   :param operator: A FermionOperator to transform.
   :type operator: openfermion.ops.FermionOperator
   :param n_qubits: Can force the number of qubits in the resulting operator above the
                    number that appear in the input operator.
   :type n_qubits: int|None

   :returns: An instance of the QubitOperator class.
   :rtype: transformed_operator

   :raises ValueError: Invalid number of qubits specified.


.. py:function:: inline_sum(summands, seed)

   Computes a sum, using the __iadd__ operator.
   :param seed: The starting total. The zero value.
   :type seed: T
   :param summands: Values to add (with +=) into the total.
   :type summands: iterable[T]

   :returns: The result of adding all the factors into the zero value.
   :rtype: T


.. py:function:: inline_product(factors, seed)

   Computes a product, using the __imul__ operator.
   :param seed: The starting total. The unit value.
   :type seed: T
   :param factors: Values to multiply (with *=) into the total.
   :type factors: iterable[T]

   :returns: The result of multiplying all the factors into the unit value.
   :rtype: T


