:py:mod:`quantum.openfermion.utils`
===================================

.. py:module:: quantum.openfermion.utils


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   commutators/index.rst
   indexing/index.rst
   operator_utils/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.openfermion.utils.anticommutator
   quantum.openfermion.utils.commutator
   quantum.openfermion.utils.double_commutator
   quantum.openfermion.utils.down_index
   quantum.openfermion.utils.up_index
   quantum.openfermion.utils.up_then_down
   quantum.openfermion.utils.count_qubits
   quantum.openfermion.utils.get_file_path
   quantum.openfermion.utils.hermitian_conjugated
   quantum.openfermion.utils.is_hermitian
   quantum.openfermion.utils.is_identity
   quantum.openfermion.utils.load_operator
   quantum.openfermion.utils.save_operator



.. py:function:: anticommutator(operator_a, operator_b)

   Compute the anticommutator of two operators.

   :param operator_a: Operators in anticommutator. Any operators
                      are accepted so long as implicit addition and multiplication are
                      supported; e.g. QubitOperators, FermionOperators, BosonOperators,
                      or Scipy sparse matrices. 2D Numpy arrays are also supported.
   :param operator_b: Operators in anticommutator. Any operators
                      are accepted so long as implicit addition and multiplication are
                      supported; e.g. QubitOperators, FermionOperators, BosonOperators,
                      or Scipy sparse matrices. 2D Numpy arrays are also supported.

   :raises TypeError: operator_a and operator_b are not of the same type.


.. py:function:: commutator(operator_a, operator_b)

   Compute the commutator of two operators.

   :param operator_a: Operators in commutator. Any operators
                      are accepted so long as implicit subtraction and multiplication are
                      supported; e.g. QubitOperators, FermionOperators, BosonOperators,
                      or Scipy sparse matrices. 2D Numpy arrays are also supported.
   :param operator_b: Operators in commutator. Any operators
                      are accepted so long as implicit subtraction and multiplication are
                      supported; e.g. QubitOperators, FermionOperators, BosonOperators,
                      or Scipy sparse matrices. 2D Numpy arrays are also supported.

   :raises TypeError: operator_a and operator_b are not of the same type.


.. py:function:: double_commutator(op1, op2, op3, indices2=None, indices3=None, is_hopping_operator2=None, is_hopping_operator3=None)

   Return the double commutator [op1, [op2, op3]].

   :param op1: operators for
               the commutator. All three operators must be of the same type.
   :type op1: FermionOperators or BosonOperators
   :param op2: operators for
               the commutator. All three operators must be of the same type.
   :type op2: FermionOperators or BosonOperators
   :param op3: operators for
               the commutator. All three operators must be of the same type.
   :type op3: FermionOperators or BosonOperators
   :param indices2: The indices op2 and op3 act on.
   :type indices2: set
   :param indices3: The indices op2 and op3 act on.
   :type indices3: set
   :param is_hopping_operator2: Whether op2 is a hopping operator.
   :type is_hopping_operator2: bool
   :param is_hopping_operator3: Whether op3 is a hopping operator.
   :type is_hopping_operator3: bool

   :returns: The double commutator of the given operators.


.. py:function:: down_index(index)

   Function to return down-orbital index given a spatial orbital index.

   :param index: spatial orbital index
   :type index: int

   :returns: An integer representing the index of the associated spin-down orbital


.. py:function:: up_index(index)

   Function to return up-orbital index given a spatial orbital index.

   :param index: spatial orbital index
   :type index: int

   :returns: An integer representing the index of the associated spin-up orbital


.. py:function:: up_then_down(mode_idx, num_modes)

   up then down reordering, given the operator has the default even-odd
    ordering. Otherwise this function will reorder indices where all even
    indices now come before odd indices.

    Example:
        0,1,2,3,4,5 -> 0,2,4,1,3,5

   The function takes in the index of the mode that will be relabeled and
   the total number modes.

   :param mode_idx: the mode index that is being reordered
   :type mode_idx: int
   :param num_modes: the total number of modes of the operator.
   :type num_modes: int

   Returns (int): reordered index of the mode.


.. py:function:: count_qubits(operator)

   Compute the minimum number of qubits on which operator acts.

   :param operator: FermionOperator, QubitOperator, or PolynomialTensor.

   :returns: The minimum number of qubits on which operator acts.
   :rtype: num_qubits (int)

   :raises TypeError: Operator of invalid type.


.. py:function:: get_file_path(file_name, data_directory)

   Compute file_path for the file that stores operator.

   :param file_name: The name of the saved file.
   :param data_directory: Optional data directory to change from default data
                          directory specified in config file.

   :returns: File path.
   :rtype: file_path (string)

   :raises OperatorUtilsError: File name is not provided.


.. py:function:: hermitian_conjugated(operator)

   Return Hermitian conjugate of operator.


.. py:function:: is_hermitian(operator)

   Test if operator is Hermitian.


.. py:function:: is_identity(operator)

   Check whether QubitOperator of FermionOperator is identity.

   :param operator: QubitOperator, FermionOperator,
                    BosonOperator, or QuadOperator.

   :raises TypeError: Operator of invalid type.


.. py:function:: load_operator(file_name=None, data_directory=None, plain_text=False)

   Load FermionOperator or QubitOperator from file.

   :param file_name: The name of the saved file.
   :param data_directory: Optional data directory to change from default data
                          directory specified in config file.
   :param plain_text: Whether the input file is plain text

   :returns:

             The stored FermionOperator, BosonOperator,
                 QuadOperator, or QubitOperator
   :rtype: operator

   :raises TypeError: Operator of invalid type.


.. py:function:: save_operator(operator, file_name=None, data_directory=None, allow_overwrite=False, plain_text=False)

   Save FermionOperator or QubitOperator to file.

   :param operator: An instance of FermionOperator, BosonOperator,
                    or QubitOperator.
   :param file_name: The name of the saved file.
   :param data_directory: Optional data directory to change from default data
                          directory specified in config file.
   :param allow_overwrite: Whether to allow files to be overwritten.
   :param plain_text: Whether the operator should be saved to a
                      plain-text format for manual analysis

   :raises OperatorUtilsError: Not saved, file already exists.
   :raises TypeError: Operator of invalid type.
   :raises TypeError: Coefficients in Operator sympy expressions.


.. py:exception:: OperatorSpecificationError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:exception:: OperatorUtilsError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


