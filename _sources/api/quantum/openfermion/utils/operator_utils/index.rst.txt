:py:mod:`quantum.openfermion.utils.operator_utils`
==================================================

.. py:module:: quantum.openfermion.utils.operator_utils

.. autoapi-nested-parse::

   This module provides generic tools for classes in ops/



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   quantum.openfermion.utils.operator_utils.hermitian_conjugated
   quantum.openfermion.utils.operator_utils.is_hermitian
   quantum.openfermion.utils.operator_utils.count_qubits
   quantum.openfermion.utils.operator_utils.is_identity
   quantum.openfermion.utils.operator_utils.get_file_path
   quantum.openfermion.utils.operator_utils.load_operator
   quantum.openfermion.utils.operator_utils.save_operator



.. py:exception:: OperatorUtilsError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:exception:: OperatorSpecificationError

   Bases: :py:obj:`Exception`

   Common base class for all non-exit exceptions.


.. py:function:: hermitian_conjugated(operator)

   Return Hermitian conjugate of operator.


.. py:function:: is_hermitian(operator)

   Test if operator is Hermitian.


.. py:function:: count_qubits(operator)

   Compute the minimum number of qubits on which operator acts.

   :param operator: FermionOperator, QubitOperator, or PolynomialTensor.

   :returns: The minimum number of qubits on which operator acts.
   :rtype: num_qubits (int)

   :raises TypeError: Operator of invalid type.


.. py:function:: is_identity(operator)

   Check whether QubitOperator of FermionOperator is identity.

   :param operator: QubitOperator, FermionOperator,
                    BosonOperator, or QuadOperator.

   :raises TypeError: Operator of invalid type.


.. py:function:: get_file_path(file_name, data_directory)

   Compute file_path for the file that stores operator.

   :param file_name: The name of the saved file.
   :param data_directory: Optional data directory to change from default data
                          directory specified in config file.

   :returns: File path.
   :rtype: file_path (string)

   :raises OperatorUtilsError: File name is not provided.


.. py:function:: load_operator(file_name=None, data_directory=None, plain_text=False)

   Load FermionOperator or QubitOperator from file.

   :param file_name: The name of the saved file.
   :param data_directory: Optional data directory to change from default data
                          directory specified in config file.
   :param plain_text: Whether the input file is plain text

   :returns:

             The stored FermionOperator, BosonOperator,
                 QuadOperator, or QubitOperator
   :rtype: operator

   :raises TypeError: Operator of invalid type.


.. py:function:: save_operator(operator, file_name=None, data_directory=None, allow_overwrite=False, plain_text=False)

   Save FermionOperator or QubitOperator to file.

   :param operator: An instance of FermionOperator, BosonOperator,
                    or QubitOperator.
   :param file_name: The name of the saved file.
   :param data_directory: Optional data directory to change from default data
                          directory specified in config file.
   :param allow_overwrite: Whether to allow files to be overwritten.
   :param plain_text: Whether the operator should be saved to a
                      plain-text format for manual analysis

   :raises OperatorUtilsError: Not saved, file already exists.
   :raises TypeError: Operator of invalid type.
   :raises TypeError: Coefficients in Operator sympy expressions.


