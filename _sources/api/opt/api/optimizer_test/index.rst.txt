:py:mod:`opt.api.optimizer_test`
================================

.. py:module:: opt.api.optimizer_test

.. autoapi-nested-parse::

   Test case prototypes that can be used in other projects.

   Note that this file won't be executed on its own by pytest.
   You need to define your own test cases that inherit from the ones defined here.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   opt.api.optimizer_test.OptimizerTests




Attributes
~~~~~~~~~~

.. autoapisummary::

   opt.api.optimizer_test.MANDATORY_OPTIMIZATION_RESULT_FIELDS
   opt.api.optimizer_test.NESTED_OPTIMIZER_CONTRACTS


.. py:data:: MANDATORY_OPTIMIZATION_RESULT_FIELDS
   :annotation: = ['nfev', 'nit', 'opt_value', 'opt_params']

   

.. py:class:: OptimizerTests

   Bases: :py:obj:`object`

   Base class for optimizers tests.

   How to use:
   1. Inherit this class (remember to start name of the class with "Test"
   2. In the same module define fixture called "optimizer".

   Basic usage pattern:

   @pytest.fixture
   def optimizer():
       return MyOptimizer()


   class TestMyOptimizer(OptimizerTests): # Inherits all tests from this class
        def test_some_new_feature(self, optimizer): # new test
            ....

   Notice that the `optimizer` fixture can be parametrized if you wish to
   perform tests for various configurations of your optimizer.

   .. py:method:: sum_x_squared(self)


   .. py:method:: rosenbrock_function(self)

      The Rosenbrock function


   .. py:method:: test_optimizer_succeeds_with_optimizing_rosenbrock_function(self, optimizer, rosenbrock_function, keep_history)


   .. py:method:: test_optimizer_succeeds_with_optimizing_sum_of_squares_function(self, optimizer, sum_x_squared, keep_history)


   .. py:method:: test_optimizer_succeeds_on_cost_function_without_gradient(self, optimizer, sum_x_squared, keep_history)


   .. py:method:: test_optimizer_records_history_if_keep_history_is_true(self, optimizer, sum_x_squared)


   .. py:method:: test_gradients_history_is_recorded_if_keep_history_is_true(self, optimizer, sum_x_squared)


   .. py:method:: test_optimizer_does_not_record_history_if_keep_history_is_set_to_false(self, optimizer, sum_x_squared)


   .. py:method:: test_optimizer_does_not_record_history_by_default(self, optimizer, sum_x_squared)



.. py:data:: NESTED_OPTIMIZER_CONTRACTS
   

   

