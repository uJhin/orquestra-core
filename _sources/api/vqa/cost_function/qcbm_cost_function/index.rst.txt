:py:mod:`vqa.cost_function.qcbm_cost_function`
==============================================

.. py:module:: vqa.cost_function.qcbm_cost_function


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   vqa.cost_function.qcbm_cost_function.create_QCBM_cost_function



Attributes
~~~~~~~~~~

.. autoapisummary::

   vqa.cost_function.qcbm_cost_function.GradientFactory
   vqa.cost_function.qcbm_cost_function.DistanceMeasure


.. py:data:: GradientFactory
   

   

.. py:data:: DistanceMeasure
   

   

.. py:function:: create_QCBM_cost_function(ansatz: orquestra.vqa.api.ansatz.Ansatz, backend: orquestra.quantum.api.backend.QuantumBackend, n_samples: int, distance_measure: DistanceMeasure, distance_measure_parameters: dict, target_distribution: orquestra.quantum.distributions.MeasurementOutcomeDistribution, gradient_function: GradientFactory = finite_differences_gradient) -> orquestra.opt.api.cost_function.CostFunction

   Cost function used for evaluating QCBM.
   :param ansatz: the ansatz used to construct the variational circuits
   :param backend: backend used for QCBM evaluation
   :param distance_measure: function used to calculate the distance measure
   :param distance_measure_parameters: dictionary containing the relevant parameters
                                       for the chosen distance measure
   :param target_bitstring_distribution: bistring distribution which QCBM aims to learn
   :param gradient_function: a function which returns a function used to compute
                             the gradient of the cost function
                             (see orquestra.opt.gradients.finite_differences_gradient for reference)

   :returns: Callable CostFunction object that evaluates the parametrized circuit produced
             by the ansatz with the given parameters and returns the distance between
             the produced bitstring distribution and the target distribution


